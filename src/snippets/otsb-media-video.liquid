{% comment %}
  Renders product media gallery

  Accepts:
  - video: {Object} Video object (optional)
  - enable_video_autoplay: {Boolean} Enable autoplay video. Default: false (optional)
  - video_id: {String} Video ID
  - video_alt: {Boolean} Video alt text.
  - columns_desktop: {Integer} Number of columns on desktop.

  Usage:
  {% render 'media-video', lazy_load: false %}
{% endcomment %}

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.store('xVideo', {
      ytIframeId: 0,
      vimeoIframeId: 0,
      externalListened: false,
      play(el) {
        let video = el.getElementsByClassName('otsb-video')[0];
        if (!video && el.closest('.contain-video')) {
          video = el.closest('.contain-video').getElementsByClassName('otsb-video')[0];
        }
        if (video) {
          if (video.tagName == 'IFRAME') {
            this.externalPostCommand(video, 'play');
          } else if (video.tagName == 'VIDEO') {
            video.play();
          }
        }
      },
      pause(el) {
        let video = el.getElementsByClassName('otsb-video')[0];
        if (!video && el.closest('.contain-video')) {
          video = el.closest('.contain-video').getElementsByClassName('otsb-video')[0];
        }
        if (video) {
          if (video.tagName == 'IFRAME') {
            this.externalPostCommand(video, 'pause');
          } else if (video.tagName == 'VIDEO') {
            video.pause();
          }
        }
      },
      mp4Thumbnail(el) {
        const videoContainer = el.closest('.otsb-external-video');
        const imgThumbnail = videoContainer.getElementsByClassName('otsb-img-thumbnail')[0];
        const buttonPlay = videoContainer.getElementsByClassName('otsb-button-play')[0];
        const video = videoContainer.getElementsByClassName('otsb-video')[0];
        if (imgThumbnail) {
          imgThumbnail.classList.add('hidden');
        }
        if (buttonPlay) {
          buttonPlay.classList.add('hidden');
        }
        if (video) {
          video.setAttribute("controls",'');
        }
        this.play(videoContainer);
      },
      externalLoad(el, host, id, loop, title, controls = 1) {
        let src = '';
        let pointerEvent = '';
        if (host == 'youtube') {
          src = `https://www.youtube.com/embed/${id}?mute=1&playlist=${id}&autoplay=1&playsinline=1&enablejsapi=1&modestbranding=1&rel=0&controls=${controls}&showinfo=${controls}`;
        } else {
          src = `https://player.vimeo.com/video/${id}?muted=1&autoplay=1&playsinline=1&api=1&controls=${controls}`;
        }
  
        if (controls == 0) {
          pointerEvent = " pointer-events-none";
        }
        requestAnimationFrame(() => {
          const videoContainer = el.closest('.otsb-external-video');
          videoContainer.innerHTML = `<iframe data-video-loop="${loop}" class="otsb-iframe-video absolute w-full h-full otsb-video top-1/2 -translate-y-1/2 ${ pointerEvent }"
            frameborder="0" host="${host}" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen playsinline
            src="${src}" title="${title}"></iframe>`;
  
          videoContainer.querySelector('.otsb-iframe-video').addEventListener("load", () => {
            setTimeout(() => {
              this.play(videoContainer);
  
              if (host == 'youtube') {
                this.ytIframeId++;
                videoContainer.querySelector('.otsb-iframe-video').contentWindow.postMessage(JSON.stringify({
                  event: 'listening',
                  id: this.ytIframeId,
                  channel: 'widget'
                }), '*');
              } else {
                this.vimeoIframeId++;
                videoContainer.querySelector('.otsb-iframe-video').contentWindow.postMessage(JSON.stringify({
                  method: 'addEventListener',
                  value: 'finish'
                }), '*');
              }
            }, 100);
          });
        });
  
        this.externalListen();
      },
      renderVimeoFacade(el, id, options) {
        fetch(`https://vimeo.com/api/oembed.json?url=https://vimeo.com/${id}&width=${options.width}`)
          .then(reponse => {
            return reponse.json();
          }).then((response) => {
            const html = `
              <picture>
                <img src="${response.thumbnail_url}" loading="lazy" class="w-full h-full object-cover" alt="${options.alt}" width="${response.width}" height="${response.height}"/>
              </picture>
            `;
            
            requestAnimationFrame(() => {
              el.innerHTML = html;
            });
          });
      },
      externalListen() {
        if (!this.externalListened) {
          window.addEventListener('message', (event) => {
            var iframes = document.getElementsByTagName('IFRAME');
  
            for (let i = 0, iframe, win, message; i < iframes.length; i++) {
              iframe = iframes[i];
  
              if (iframe.getAttribute('data-video-loop') !== 'true') continue;
  
              // Cross-browser way to get iframe's window object
              win = iframe.contentWindow || iframe.contentDocument.defaultView;
  
              if (win === event.source) {
                if (event.origin == 'https://www.youtube.com') {
                  message = JSON.parse(event.data);
                  if (message.info && message.info.playerState == 0) {
                    this.play(iframe.parentNode);
                  }
                }
  
                if (event.origin == 'https://player.vimeo.com') {
                  message = JSON.parse(event.data);
                  if (message.event == "finish") {
                    this.play(iframe.parentNode);
                  }
                }
              }
            }
          });
  
          this.externalListened = true;
        }
      },
      externalPostCommand(iframe, cmd) {
        const host = iframe.getAttribute('host');
        const command = host == 'youtube' ? {
          "event": "command",
          "func": cmd + "Video"
        } : {
          "method": cmd,
          "value": "true"
        };
  
        iframe.contentWindow.postMessage(JSON.stringify(command), '*');
      },
    });
});
</script>

{%- if enable_video_autoplay -%}
    {%- if video_type == 'youtube' or video_type == 'vimeo' -%}
      <div
        x-data
        class="w-full h-full absolute"
        x-intersect="$store.xVideo.externalLoad($el, '{{ video_type }}', '{{ video_id }}', {{ enable_video_autoplay }}, `{{ video_alt }}`, 0)"
      >
      </div>
    {%- endif -%}
    {% if video_type == 'video_select' %}
      {% liquid
        if collage
          assign classVideo = "w-full h-full otsb-video object-cover"
        else
          assign classVideo = "w-full h-full absolute top-0 left-0 otsb-video object-cover"
        endif 
      %}
      <div x-data="{load: false}" x-intersect.once.margin.200px="load = true;" class="min-h-[1px]">
        <template x-if="load">
          <div x-intersect.once="$store.xVideo.play($el)">
            {{ video
              | video_tag:
              image_size: "1100x",
              loop: true,
              controls: false,
              muted: true,
              class: classVideo,
              alt: video.alt
            }} 
          </div>
        </template>
      </div>
    {% endif %}
  {%- else -%}
    {%- capture button_play -%}
      <button 
        x-data
        class="otsb-button-play absolute z-20 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-16 h-16{% if columns_desktop > 1 %} md:w-24 md:h-24{% endif %} rounded-full p-5 bg-white/30 bg-opacity-30 disabled:cursor-not-allowed"
        {% if video_type == 'video_select' %}@click.prevent="$store.xVideo.mp4Thumbnail($el)"{% endif %}
        {% if video_type == 'youtube' or video_type == 'vimeo' %}@click.prevent="$store.xVideo.externalLoad($el, '{{ video_type }}', '{{ video_id }}', false, '{{ video_alt }}')"{% endif %}
        aria-label="image-video"
      >
        <span class="pointer-events-none duration-200 otsb-bg-button-play absolute w-6 h-6{% if columns_desktop > 1 %} md:w-10 md:h-10{% endif %} top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 text-white">
          {% render 'otsb-icon-media', icon: 'icon-play', class: 'w-full h-full' %}
        </span>
      </button>
    {%- endcapture -%}
    {% if cover_image != blank %}
      <img
        srcset="{{ cover_image | image_url: width: 375 }} 375w,
        {{ cover_image | image_url: width: 450 }} 450w,
        {{ cover_image | image_url: width: 750 }} 750w,
        {{ cover_image | image_url: width: 900 }} 900w,
        {{ cover_image | image_url: width: 1100 }} 1100w,
        {{ cover_image | image_url: width: 1500 }} 1500w,
        {{ cover_image | image_url: width: 1780 }} 1780w,
        {{ cover_image | image_url: width: 2000 }} 2000w,
        {{ cover_image | image_url: width: 3000 }} 3000w,
        {{ cover_image | image_url: width: 3840 }} 3840w"
        sizes="100vw"
        src="{{ cover_image | image_url: width: 3840 }}"
        alt="{{ cover_image.alt | escape }}"
        class="object-cover z-10 absolute top-0 left-0 h-full w-full otsb-img-thumbnail otsb-image-hover"
        loading="lazy"
        width="{{ cover_image.width }}"
        height="{{ cover_image.height }}"
        style="object-position:{{ cover_image.presentation.focal_point }};"
      >
      {{ button_play }}
      {% if video_type == 'video_select' %}
        <div x-data="{load: false}" x-intersect.once.margin.200px="load = true;" class="min-h-[1px]">
          <template x-if="load">
            {{ video
              | video_tag:
                image_size: "1100x",
                loop: false,
                controls: true,
                muted: false,
                class: "w-full h-full absolute top-0 left-0 otsb-video object-cover",
                alt: video.alt
            }}
          </template>
        </div>
      {% endif %}
    {% else %}
      {% if video_type == 'youtube' %}
        {% comment %}theme-check-disable RemoteAsset{% endcomment %}
        <div
          class="absolute h-full w-full otsb-video"
          aria-label="image-video">
          <picture>
            <source type="image/webp" srcset="{{ video_id | prepend: 'https://i.ytimg.com/vi_webp/' | append: '/maxresdefault.webp' }}">
            <source type="image/jpeg" srcset="{{ video_id | prepend: 'https://i.ytimg.com/vi/' | append: '/maxresdefault.jpg' }}">
            <img src="{{ video_id | prepend: 'https://i.ytimg.com/vi_webp/' | append: '/maxresdefault.webp' }}" loading="lazy" class="w-full h-full object-cover" alt="{{ video_alt }}" width="1280" height="890"/>
          </picture>
        </div>
        {% comment %}theme-check-enable RemoteAsset{% endcomment %}
        {{ button_play }}
      {% elsif video_type == 'vimeo' %}
        {%- capture options -%}
          {
            'alt': '{{ video_alt }}',
            'width': 1280
          }
        {%- endcapture -%}
        <div class="otsb-external-video w-full h-full bg-black">
          <div class="h-full w-full" x-init="$store.xVideo.renderVimeoFacade($el, '{{ video_id }}', {{ options }})"></div>
          {{ button_play }}
        </div>
      {% elsif video_type == 'video_select' %}
      <div x-data="{load: false}" x-intersect.once.margin.200px="load = true;">
        <template x-if="load">
          {{ video
            | video_tag:
              image_size: "1100x",
              loop: false,
              controls: true,
              muted: false,
              class: "w-full h-full absolute otsb-video object-cover",
              alt: video.alt
          }}
        </template>
        {{ button_play }}
      </div>
      {% endif %}
    {% endif %}
  {%- endif -%}